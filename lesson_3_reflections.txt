When would you want to use a remote repository rather than keeping all your work
local?

> When a group of people are needed for a project. Sharing a remote repository both allows
individuals to work independently and enables the group to better coordinate their efforts.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

> Allowing Git to stay up to date would make it difficult to make smaller changes when
these might have been necessary. Pulling manually breaks the work up into smaller,
more manageable pieces.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

> Forks are working copies of a project, stored in a contributor's github namespace/account. 
It can be altered without affecting the original project. Forking is how one can contribute 
to a project without having push access. Having changes added would require review and
authorization from the project owner(s).
  A clone is a full copy of a project that can be transferred to a local directory or to 
a server. Contributors with full access would use this method of access to add to a project.
  A branch is a separate section of work, or a departure from the main master branch. It
allows one to make potential changes to a project without affecting the master or other 
branches. Changes / commits made to a branch aren't reflected in the master until it is 
merged with it.

What is the benefit of having a copy of the last known state of the remote
stored locally?

> To check for potential conflicting changes to both the local and remote repositories
before merging. To have a complete copy of the remote repository to work on while
offline.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

> Collaborating without git would require at least some simple rules for even the smallest
of projects. Initially, these rules for the management of a small project might seem easier
to work with than conforming to the organizational structure imposed by git. But this could 
quickly fall apart as the project grew in size, especially if the number of collaborators
grew to more than a few people. Keeping track of changes to a large core project, let alone 
new features that may or may not be added, would be very difficult without git's user, commit
and conflict tracking and branching features.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

> Significant changes would be added in a separate branch, keeping these more isolated from
the core project until they are finalized and other changes or corrections would be added
to master.









